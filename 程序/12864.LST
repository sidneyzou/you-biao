C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE 12864
OBJECT MODULE PLACED IN 12864.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE 12864.C LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /**********************12864函数文件*********************************
   2          *  晶振:11.0592MHZ
   3          ******************************************************************/
   4          
   5          /**********************包含文件*******************/
   6          #include <12864.h>
   7          #include "english_5x8_pixel.h"
   8          /*********************************全局变初始化***********************************/ 
   9          uchar code DCB2HEX_TAB[8] = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
  10          
  11          /******************************************************************************/
  12          /* 函数名称  : LCD_Delay                                                      */
  13          /* 函数描述  : 延时函数                                                       */
  14          /* 输入参数  : uint xms                                                       */
  15          /* 参数描述  : 延迟                                                           */
  16          /* 返回值    : 无                                                             */
  17          /******************************************************************************/  
  18          void LCD_Delay(uint ms)
  19          {
  20   1          while(ms--)
  21   1        {
  22   2            uint i;
  23   2           for(i=0;i<250;i++)  
  24   2           {
  25   3            _nop_();         
  26   3            _nop_();
  27   3            _nop_();
  28   3            _nop_();
  29   3           }
  30   2        }
  31   1      }   
  32          /******************************************************************************/
  33          /* 函数名称  : LCD_Busy                                                       */
  34          /* 函数描述  : LCD查忙                                                        */
  35          /* 输入参数  : void                                                           */
  36          /* 参数描述  : 无                                                             */
  37          /* 返回值    : lcd_busy为1时，忙，等待。lcd-busy为0时,闲，可写指令与数据      */
  38          /******************************************************************************/
  39          bit LCD_Busy(void)
  40          {                          
  41   1        bit result;
  42   1        LCD_RS = 0;
  43   1        LCD_RW = 1;
  44   1        LCD_EN = 1;
  45   1        LCD_DELAYNOP;
  46   1        result = (bit)(LCD_DATA&0x80);
  47   1        LCD_EN = 0;
  48   1        return(result); 
  49   1      }
  50          /******************************************************************************/
  51          /* 函数名称  : LCD_Wcmd                                                       */
  52          /* 函数描述  : 写指令数据到LCD  RS=L，RW=L，E=高脉冲，D0-D7=指令码            */
  53          /* 输入参数  : uchar cmd                                                      */
  54          /* 参数描述  : 输入命令                                                       */
  55          /* 返回值    : 无                                                             */
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 2   

  56          /******************************************************************************/
  57          void LCD_Wcmd(uchar cmd)
  58          {                          
  59   1         while(LCD_Busy());
  60   1          LCD_RS = 0;
  61   1          LCD_RW = 0;
  62   1          LCD_EN = 0;
  63   1          LCD_DELAYNOP;
  64   1          LCD_DATA = cmd;
  65   1          LCD_DELAYNOP;
  66   1          LCD_EN = 1;
  67   1          LCD_DELAYNOP;
  68   1          LCD_EN = 0;  
  69   1      }
  70          /******************************************************************************/
  71          /* 函数名称  : LCD_Wdat                                                       */
  72          /* 函数描述  : 写显示数据到LCD  RS=H，RW=L，E=高脉冲，D0-D7=数据              */
  73          /* 输入参数  : uchar dat                                                      */
  74          /* 参数描述  : 输入数据                                                       */
  75          /* 返回值    : 无                                                             */
  76          /******************************************************************************/
  77          void LCD_Wdat(uchar dat)
  78          {                          
  79   1         while(LCD_Busy());
  80   1          LCD_RS = 1;
  81   1          LCD_RW = 0;
  82   1          LCD_EN = 0;
  83   1          LCD_DELAYNOP;
  84   1          LCD_DATA = dat;
  85   1          LCD_DELAYNOP;
  86   1          LCD_EN = 1;
  87   1          LCD_DELAYNOP;
  88   1          LCD_EN = 0; 
  89   1      }
  90          /******************************************************************************/
  91          /* 函数名称  : LCD_Rdat                                                       */
  92          /* 函数描述  : LCD读数据                                                      */
  93          /* 输入参数  : void                                                           */
  94          /* 参数描述  : 无                                                             */
  95          /* 返回值    : 无                                                             */
  96          /******************************************************************************/
  97          uchar LCD_Rdat(void)
  98          {
  99   1        uchar temp;
 100   1        LCD_DATA = 0XFF; 
 101   1        LCD_RS = 1; 
 102   1        LCD_RW = 1; 
 103   1        LCD_EN = 1; 
 104   1        LCD_Delay_S(1);
 105   1        temp = LCD_DATA;
 106   1        LCD_EN = 0;
 107   1        return temp;
 108   1      }
 109          /******************************************************************************/
 110          /* 函数名称  : LCD_Init                                                       */
 111          /* 函数描述  : LCD初始化                                                      */
 112          /* 输入参数  : void                                                           */
 113          /* 参数描述  : 无                                                             */
 114          /* 返回值    : 无                                                             */
 115          /******************************************************************************/
 116          void LCD_Init(void)
 117          { 
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 3   

 118   1      
 119   1          LCD_PSB = 1;         //并口方式
 120   1          
 121   1          LCD_Wcmd(0x34);      //扩充指令操作
 122   1          LCD_Delay(5);
 123   1          LCD_Wcmd(0x30);      //基本指令操作
 124   1          LCD_Delay(5);
 125   1          LCD_Wcmd(0x0C);      //显示开，关光标
 126   1          LCD_Delay(5);
 127   1          LCD_Wcmd(0x01);      //清除LCD的显示内容
 128   1          LCD_Delay(5);
 129   1      }
 130          /******************************************************************************/
 131          /* 函数名称  : LCD_Pos                                                        */
 132          /* 函数描述  : 显示位置                                                       */
 133          /* 输入参数  : uchar x ,uchar y                                               */
 134          /* 参数描述  : 坐标x y                                                        */
 135          /* 返回值    : 无                                                             */
 136          /******************************************************************************
 137          void LCD_Pos(uchar X,uchar Y)
 138          {                          
 139             uchar  pos;
 140             if (X==0)
 141               {X=0x80;}
 142             else if (X==1)
 143               {X=0x90;}
 144             else if (X==2)
 145               {X=0x88;}
 146             else if (X==3)
 147               {X=0x98;}
 148             pos = X+Y ;  
 149             LCD_Wcmd(pos);     //显示地址
 150          }
 151          /******************************************************************************/
 152          /* 函数名称  : LCD_Wstring                                                    */
 153          /* 函数描述  : 显示字符串                                                     */
 154          /* 参数描述  : 坐标x y 字符串指针Alphabet                                     */
 155          /* 返回值    : 无                                                             */
 156          /******************************************************************************
 157          void LCD_Wstring(uchar x,uchar y,uchar *Alphabet)
 158          {
 159            uchar i=0;
 160            LCD_Pos(x,y);
 161            while(Alphabet[i]!='\0')
 162            {
 163              LCD_Wdat(Alphabet[i]);
 164              i++;
 165            }
 166          }
 167          
 168          /******************************************************************************/
 169          /* 函数名称  : LCD_Gui_Clear                                                  */
 170          /* 函数描述  : 绘图清屏                                                       */
 171          /* 参数描述  : 无                                                             */
 172          /* 返回值    : 无                                                             */
 173          /******************************************************************************/
 174          void LCD_Gui_Clear()
 175          {
 176   1        uchar i , j , k;
 177   1        LCD_Wcmd(EXTEND_SET);//扩展指令集 8位数据传输
 178   1        LCD_Wcmd(DRAW_OFF);//绘图显示关闭
 179   1        for(i = 0; i < 2; i ++)//分上下两屏写
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 4   

 180   1        {
 181   2          for(j = 0; j < 32; j ++)
 182   2          {
 183   3            LCD_Wcmd(0x80 + j);//写Y轴
 184   3            LCD_Delay_S(1);
 185   3            if(i == 0) //写X轴
 186   3            {
 187   4              LCD_Wcmd(0x80);
 188   4              LCD_Delay_S(1);
 189   4            }
 190   3            else //写下半屏
 191   3            {
 192   4              LCD_Wcmd(0x88);
 193   4              LCD_Delay_S(1);
 194   4            }
 195   3            for(k = 0; k < 16; k ++)//写一整行数据
 196   3            {
 197   4              LCD_Wdat(0x00);//写高字节
 198   4              LCD_Wdat(0x00);//写低字节
 199   4              LCD_Delay_S(1);
 200   4            }
 201   3          }
 202   2        }
 203   1        LCD_Wcmd(DRAW_ON);//打开绘图显示
 204   1        LCD_Wcmd(BASIC_SET);//打开基本指令集
 205   1      }
 206          /******************************************************************************/
 207          /* 函数名称  : LCD_Gui_Point                                                  */
 208          /* 函数描述  : 黑白打点                                                       */
 209          /* 参数描述  : 参数:color=1,该点填充1;color=0,该点填充0                       */
 210          /* 返回值    : 无                                                             */
 211          /******************************************************************************/
 212          void LCD_Gui_Point(uchar x,uchar y,uchar color)
 213          {
 214   1        uchar x_Dyte,x_byte; //定义列地址字节位，和在字节中哪一位
 215   1        uchar y_Dyte,y_byte; //定义为上下两个屏（取值0，1），行地址（0-31）
 216   1        uchar GDRAM_hbit,GDRAM_lbit;
 217   1        LCD_Wcmd(0x36); //扩展指令集
 218   1        /*X,Y坐标互换,即普通的X，Y坐标*/
 219   1        x_Dyte=x/16; //计算在16个字节中哪一位
 220   1        x_byte=x&0x0f; //计算在该字节中的哪一位
 221   1        y_Dyte=y/32; //0为上半屏 1为下半屏
 222   1        y_byte=y&0x1f; //计算在0-31当中的哪一行
 223   1        LCD_Wcmd(0x80+y_byte); //设定行地址Y
 224   1        LCD_Wcmd(0x80+x_Dyte+8*y_Dyte); // 设定列地址X 选上下屏
 225   1        LCD_Rdat();// 读取当前数据
 226   1        GDRAM_hbit= LCD_Rdat(); //读取当前显示高8位
 227   1        GDRAM_lbit= LCD_Rdat(); //读取当前显示低8位
 228   1        LCD_Delay_S(1);
 229   1        LCD_Wcmd(0x80+y_byte); //设定行地址Y
 230   1        LCD_Wcmd(0x80+x_Dyte+8*y_Dyte);// 设定列地址X 选上下屏
 231   1        LCD_Delay_S(1);
 232   1        if(x_byte<8) //判断高8位 还是低8位
 233   1        {
 234   2          if(color==1)
 235   2          {
 236   3            LCD_Wdat(GDRAM_hbit|(0x01<<(7-x_byte))); //置位GDRAM区高8位数据中相应的点
 237   3          }
 238   2          else
 239   2            LCD_Wdat(GDRAM_hbit&(~(0x01<<(7-x_byte)))); //清除GDRAM区高8位数据中相应的点
 240   2            LCD_Wdat(GDRAM_lbit); //显示GDRAM区低8位数据中相应的点
 241   2          }
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 5   

 242   1        else
 243   1        {
 244   2          LCD_Wdat(GDRAM_hbit);
 245   2          if(color==1)
 246   2            LCD_Wdat(GDRAM_lbit|(0x01<<(15-x_byte))); //置位GDRAM区高8位数据中相应的点
 247   2          else
 248   2            LCD_Wdat(GDRAM_lbit&(~(0x01<<(15-x_byte))));//清除GDRAM区高8位数据中相应的点
 249   2        }
 250   1        LCD_Wcmd(0x30); //恢复到基本指令集
 251   1      }
 252          
 253          
 254          /******************************************************************************/
 255          /* 函数名称  : LCD_Gui_Point_A                                                */
 256          /* 函数描述  : 任意打点                                                       */
 257          /* 参数描述  :                                                                */
 258          /* 返回值    : 无                                                             */
 259          /******************************************************************************
 260          void LCD_Gui_Point_A(uchar x,uchar y)
 261          {
 262            uchar x_byte,x_bit;//确定坐标在哪一字节哪一位
 263            uchar y_ping , y_bit;//确定坐标在哪一屏哪一行
 264            uchar tmph , tmpl;//定义两个临时变量 用于存放读出来的数据
 265            LCD_Wcmd(EXTEND_SET);//扩展指令集
 266            LCD_Wcmd(DRAW_OFF);//绘图显示关
 267            x_byte = x / 16;//在哪一字节
 268            x_bit = x % 16;//算出在哪一位
 269            y_ping = y / 32;//确定上下屏
 270            y_bit = y % 32;//确定哪一行
 271            LCD_Wcmd(0X80 + y_bit);//先写垂直地址
 272            LCD_Wcmd(0x80 + x_byte + 8 * y_ping);//水平起始坐标 确定上下屏
 273            LCD_Rdat();//预读取数据
 274            tmph = LCD_Rdat();//读取当前显示高8位数据
 275            tmpl = LCD_Rdat();//读取当前显示低8位数据
 276            LCD_Delay_S(1);
 277            LCD_Wcmd(0x80 + y_bit);//读操作会改变AC 重设一次
 278            LCD_Wcmd(0x80 + x_byte + 8 * y_ping);
 279            LCD_Delay_S(1);
 280            if(x_bit < 8)
 281            {
 282              LCD_Wdat(tmph | (0x01 << (7 - x_bit)));//写高字节
 283              LCD_Wdat(tmpl);//原低位数据送回
 284            }
 285            else
 286            {
 287              LCD_Wdat(tmph);//原高位数据送回
 288              LCD_Wdat(tmpl | (0x01 << (15 - x_bit)));
 289            }
 290            LCD_Wcmd(DRAW_ON); //打开绘图显示
 291            LCD_Wcmd(BASIC_SET);//回到基本指令集
 292            
 293          }
 294          /******************************************************************************/
 295          /* 函数名称  : LCD_Gui_Hline                                                  */
 296          /* 函数描述  : 画水平线                                                       */
 297          /* 参数描述  : x0 起始坐标,x1 终点坐标,y 垂直坐标 color                       */
 298          /* 返回值    : 无                                                             */
 299          /******************************************************************************/
 300          void LCD_Gui_Hline(uchar x0, uchar x1, uchar y , uchar color)
 301          {
 302   1        uchar bak;
 303   1        if(x0 > x1)
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 6   

 304   1        {
 305   2          bak = x1;
 306   2          x1 = x0;
 307   2          x0 = bak;
 308   2        }
 309   1        do
 310   1        {
 311   2          LCD_Gui_Point(x0 , y , color);
 312   2          x0 ++;
 313   2        }while(x1 >= x0);
 314   1      }
 315          
 316          /******************************************************************************/
 317          /* 函数名称  : LCD_Gui_Rline                                                  */
 318          /* 函数描述  : 画竖直线                                                       */
 319          /* 参数描述  : y0起始坐标,y1 终点坐标,x 水平坐标  color                       */
 320          /* 返回值    : 无                                                             */
 321          /******************************************************************************/
 322          void LCD_Gui_Rline(uchar x, uchar y0, uchar y1 , uchar color)
 323          {
 324   1        uchar bak;
 325   1        if(y0 > y1)
 326   1        {
 327   2          bak = y1;
 328   2          y1 = y0;
 329   2          y0 = bak;
 330   2        }
 331   1        do
 332   1        {
 333   2          LCD_Gui_Point(x , y0 , color);
 334   2          y0 ++;
 335   2        }while(y1 >= y0);
 336   1      }
 337          /******************************************************************************/
 338          /* 函数名称  : LCD_Gui_Linewith                                               */
 339          /* 函数描述  : 任意连线                                                       */
 340          /* 参数描述  : x0,y0 起始坐标,x1,y1 终点坐标,with 线宽,color黑白              */
 341          /* 返回值    : 无                                                             */
 342          /******************************************************************************
 343          void LCD_Gui_Linewith(uchar x0 , uchar y0 , uchar x1 , uchar y1 , uchar with , uchar color)
 344          {
 345            char dx; 
 346            char dy; 
 347            char dx_sym; 
 348            char dy_sym; 
 349            char dx_x2; 
 350            char dy_x2;
 351            char di;
 352            char wx, wy; 
 353            char draw_a, draw_b;
 354            if(with==0) return;
 355            if(with>50) with = 50;
 356            dx = x1-x0;
 357            dy = y1-y0;
 358            wx = with/2;
 359            wy = with-wx-1;
 360            if(dx>0) 
 361            {
 362              dx_sym = 1; 
 363            }
 364            else
 365            {
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 7   

 366              if(dx<0)
 367              {
 368                dx_sym = -1; 
 369              }
 370              else
 371              {
 372                wx = x0-wx;
 373                if(wx<0) wx = 0;
 374                wy = x0+wy;
 375                while(1)
 376                {
 377                  x0 = wx;
 378                  LCD_Gui_Rline(x0, y0, y1, color);
 379                  if(wx>=wy) break;
 380                  wx++;
 381                }
 382                return;
 383              }
 384            }
 385            if(dy>0) 
 386            {
 387              dy_sym = 1; 
 388            }
 389            else
 390            {
 391              if(dy<0)
 392              {
 393                dy_sym = -1;
 394              }
 395              else
 396              {
 397                wx = y0-wx;
 398                if(wx<0) wx = 0;
 399                wy = y0+wy;
 400                while(1)
 401                {
 402                  y0 = wx;
 403                  LCD_Gui_Hline(x0, x1, y1, color);
 404                  if(wx>=wy) break;
 405                  wx++;
 406                }
 407                return;
 408              }
 409            }
 410            dx = dx_sym * dx;
 411            dy = dy_sym * dy;
 412            dx_x2 = dx*2;
 413            dy_x2 = dy*2;
 414            if(dx>=dy) 
 415            {
 416              di = dy_x2 - dx;
 417              while(x0!=x1)
 418              {
 419                draw_a = y0-wx;
 420                if(draw_a<0) draw_a = 0;
 421                draw_b = y0+wy;
 422                LCD_Gui_Rline(x0, draw_a, draw_b, color);
 423                x0 += dx_sym;
 424                if(di<0)
 425                {
 426                  di += dy_x2;
 427                }
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 8   

 428                else
 429                {
 430                  di += dy_x2 - dx_x2;
 431                  y0 += dy_sym;
 432                }
 433              }
 434              draw_a = y0-wx;
 435              if(draw_a<0) draw_a = 0;
 436              draw_b = y0+wy;
 437              LCD_Gui_Rline(x0, draw_a, draw_b, color);
 438            }
 439            else 
 440            {
 441              di = dx_x2 - dy;
 442              while(y0!=y1)
 443              {
 444                draw_a = x0-wx;
 445                if(draw_a<0) draw_a = 0;
 446                draw_b = x0+wy;
 447                LCD_Gui_Hline(draw_a, y0, draw_b, color);
 448                y0 += dy_sym;
 449                if(di<0)
 450                {
 451                  di += dx_x2;
 452                }
 453                else
 454                {
 455                  di += dx_x2 - dy_x2;
 456                  x0 += dx_sym;
 457                }
 458              }
 459              draw_a = x0-wx;
 460              if(draw_a<0) draw_a = 0;
 461              draw_b = x0+wy;
 462              LCD_Gui_Hline(draw_a, y0, draw_b, color);
 463            }
 464          }
 465          /******************************************************************************/
 466          /* 函数名称  : LCD_Gui_line                                                   */
 467          /* 函数描述  : 任意连线                                                       */
 468          /* 参数描述  : x0,y0 起始坐标,x1,y1 终点坐标,color黑白                        */
 469          /* 返回值    : 无                                                             */
 470          /******************************************************************************/
 471          void LCD_Gui_line(uchar x0 , uchar y0 , uchar x1 , uchar y1 , uchar color)
 472          {
 473   1        char dx;
 474   1        char dy;
 475   1        char dx_sym;
 476   1        char dy_sym;
 477   1        char dx_x2;
 478   1        char dy_x2;
 479   1        char di; 
 480   1        if(x0 == x1)
 481   1        {
 482   2          LCD_Gui_Rline(x0 , y0 , y1 , color);
 483   2          return;
 484   2        }
 485   1        if(y0 == y1)
 486   1        {
 487   2          LCD_Gui_Hline(x0 , x1 , y0 , color);
 488   2          return;
 489   2        }
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 9   

 490   1        dx = x1 - x0;
 491   1        dy = y1 - y0;
 492   1        if(dx > 0)
 493   1        dx_sym = 1;
 494   1        else
 495   1        {
 496   2          if(dx < 0)
 497   2            dx_sym = -1;
 498   2          else
 499   2          {
 500   3            LCD_Gui_Rline(x0 , y0 , y1 , color);
 501   3            return;
 502   3          }
 503   2        }
 504   1        if(dy > 0)
 505   1          dy_sym = 1;
 506   1        else
 507   1        {
 508   2          if(dy < 0)
 509   2            dy_sym = -1;
 510   2          else
 511   2          {
 512   3            LCD_Gui_Hline(x0 , x1 , y0 , color);
 513   3            return;
 514   3          }
 515   2        }
 516   1        
 517   1        dx = dx_sym * dx;
 518   1        dy = dy_sym * dy;
 519   1        dx_x2 = dx * 1;
 520   1        dy_x2 = dy * 1;
 521   1        if(dx >= dy)
 522   1        {
 523   2          di = dy_x2 - dx;
 524   2          while(x0 != x1)
 525   2          {
 526   3            LCD_Gui_Point(x0,y0,color);
 527   3            x0 +=dx_sym;
 528   3            if(di < 0)
 529   3              di += dy_x2;
 530   3            else
 531   3            {
 532   4              di += dy_x2 - dx_x2;
 533   4              y0 += dy_sym;
 534   4            }
 535   3          }
 536   2          LCD_Gui_Point(x0, y0,color);
 537   2        }
 538   1        else 
 539   1        {
 540   2          di = dx_x2 - dy;
 541   2          while(y0 != y1)
 542   2          {
 543   3            LCD_Gui_Point(x0, y0,color);
 544   3            y0 += dy_sym;
 545   3            if(di < 0)
 546   3              di += dx_x2;
 547   3            else
 548   3            {
 549   4              di += dx_x2 - dy_x2;
 550   4              x0 += dx_sym;
 551   4            }
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 10  

 552   3          }
 553   2            LCD_Gui_Point(x0, y0,color);
 554   2        }
 555   1      }
 556          /******************************************************************************/
 557          /* 函数名称  : LCD_Gui_Circle                                                 */
 558          /* 函数描述  : 画圆                                                           */
 559          /* 参数描述  : x0,y0 圆心坐标,r 圆半径                                        */
 560          /* 返回值    : 无                                                             */
 561          /******************************************************************************/
 562          void LCD_Gui_Circle(uchar x0 , uchar y0 , uchar r)
 563          {
 564   1        char a , b;
 565   1        char di;
 566   1        if(r > 31 || r == 0)
 567   1          return;
 568   1        a = 0;
 569   1        b = r;
 570   1        di = 3 - 2 * r;
 571   1        while(a <= b)
 572   1        {
 573   2          LCD_Gui_Point( x0 - b , y0 - a , 1);//3
 574   2          LCD_Gui_Point( x0 + b , y0 - a , 1); //0
 575   2          LCD_Gui_Point( x0 - a , y0 + b , 1); //1
 576   2          LCD_Gui_Point( x0 - b , y0 - a , 1); //7
 577   2          LCD_Gui_Point( x0 - a , y0 - b , 1); //2
 578   2          LCD_Gui_Point( x0 + b , y0 + a , 1); //4
 579   2          LCD_Gui_Point( x0 + a , y0 - b , 1); //5
 580   2          LCD_Gui_Point( x0 + a , y0 + b , 1); //6
 581   2          LCD_Gui_Point( x0 - b , y0 + a , 1);
 582   2          a ++;
 583   2        
 584   2        /***使用bresenham 算法画圆********/
 585   2          if(di < 0)
 586   2            di += 4 * a + 6;
 587   2          else
 588   2          {
 589   3            di += 10 + 4 * (a - b);
 590   3            b --;
 591   3          }
 592   2          LCD_Gui_Point( x0 + a , y0 + b , 1);
 593   2        }
 594   1        /*********************************/
 595   1      } 
 596          
 597          /******************************************************************************/
 598          /* 函数名称  : LCD_Gui_Put_Area                                               */
 599          /* 函数描述  : 自定义区域绘图                                                 */
 600          /* 参数描述  : // x,y 指定显示区域的起始坐标                                  */
 601          /*             // dat 要输出的显示的图形或者汉字点阵数组                      */
 602          /*             // hno 要显示的区域的长度                                      */
 603          /*             // lno 要显示的区域的宽度                                      */
 604          /*             // flag 反显标志  1反显                                        */
 605          /* 返回值    : 无                                                             */
 606          /******************************************************************************/
 607          void LCD_Gui_Put_Area(uchar x,uchar y,uchar *dat,uchar hno,uchar lno,uchar flag)
 608          {
 609   1        uchar i;
 610   1        for(i=0;i<lno;i++)
 611   1        {
 612   2          LCD_Gui_Loadline(x,y,dat,hno,flag);
 613   2          y++; 
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 11  

 614   2          dat += (hno>>3); 
 615   2          if((hno&0x07)!=0) 
 616   2            dat++; 
 617   2        }
 618   1      }
 619          
 620          /******************************************************************************/
 621          /* 函数名称  : LCD_Gui_Loadline                                               */
 622          /* 函数描述  : 自定义区域绘图                                                 */
 623          /* 参数描述  : // x,y 指定显示区域的起始坐标                                  */
 624          /*             // *dat 要输出的显示的图形或者汉字点阵数组                     */
 625          /*             // no 此行显示个数                                             */                                
 626          /*             // flag 反显标志  1反显                                        */
 627          /* 返回值    : 无                                                             */
 628          /******************************************************************************/
 629          void LCD_Gui_Loadline(uchar x,uchar y,uchar *dat,uchar no,uchar flag)
 630          {
 631   1        uchar bit_dat;
 632   1        uchar i;
 633   1        if(x>127) return;
 634   1        if(y>63) return;
 635   1        for(i=0; i<no; i++)
 636   1        {
 637   2          if( (i%8)==0 ) bit_dat = *dat++;
 638   2          if( (bit_dat&DCB2HEX_TAB[i&0x07])==0 )
 639   2          {
 640   3            if(flag==0) 
 641   3              LCD_Gui_Point(x,y,0); 
 642   3            else
 643   3              LCD_Gui_Point(x,y,1); 
 644   3          }
 645   2          else
 646   2          {
 647   3            if(flag==0)
 648   3              LCD_Gui_Point(x,y,1);
 649   3            else
 650   3              LCD_Gui_Point(x,y,0);
 651   3          }
 652   2          if( (++x)>127) return;
 653   2        }
 654   1      }
 655          /******************************************************************************/
 656          /* 函数名称  : LCD_Gui_Put_Area                                               */
 657          /* 函数描述  : 5*8小字输出                                                    */
 658          /* 参数描述  : // x,y 指定显示区域的起始坐标                                  */
 659          /*             // dat 要输出的显示的ASII码                                    */
 660          /* 返回值    : 无                                                             */
 661          /******************************************************************************/
 662          void LCD_Wchar_Small(uchar x,uchar y,uchar dat)
 663          {
 664   1        switch(dat)
 665   1        {
 666   2          case 0x20:LCD_Gui_Put_Area(x,y,font5x8[0],5,8,0);break;
 667   2          case 0x2f:LCD_Gui_Put_Area(x,y,font5x8[1],5,8,0);break;
 668   2          default: LCD_Gui_Put_Area(x,y,font5x8[dat - 0x2e],5,8,0);break;
 669   2        }
 670   1      }
 671          /******************************************************************************/
 672          /* 函数名称  : LCD_Wstring_Small                                              */
 673          /* 函数描述  : 5*8小字字符串输出                                              */
 674          /* 参数描述  : // x,y 指定显示区域的起始坐标                                  */
 675          /*             // *dat 要输出的显示的字符串                                   */
C51 COMPILER V9.51   12864                                                                 05/08/2015 22:55:52 PAGE 12  

 676          /* 返回值    : 无                                                             */
 677          /******************************************************************************/
 678          void LCD_Wstring_Small(uchar x,uchar y,uchar *dat)
 679          {
 680   1        uchar i;
 681   1        for(i = 0; dat[i] != '\0'; i++)
 682   1        {
 683   2          LCD_Wchar_Small(x+i*5,y,dat[i]);
 684   2        }
 685   1      }
 686          /******************************************************************************/
 687          /* 函数名称  : LCD_Delay_S                                                    */
 688          /* 函数描述  : 短延时                                                         */
 689          /* 参数描述  : 延时时间                                                       */
 690          /* 返回值    : 无                                                             */
 691          /******************************************************************************/
 692          void LCD_Delay_S(uint k)
 693          {
 694   1        uint i;
 695   1        uint j;
 696   1        for(i = 0; i < k ;i++)
 697   1          for(j = 0; j < 10 ;j++);
 698   1      }
 699          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1905    ----
   CONSTANT SIZE    =    624    ----
   XDATA SIZE       =   ----      64
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
